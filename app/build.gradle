plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.kotlin.parcelize
    alias libs.plugins.navigation.safeargs
    alias libs.plugins.googlePlayPublisher
    alias libs.plugins.githubRelease
    alias libs.plugins.kapt
    alias libs.plugins.ksp
    alias libs.plugins.detekt
}

kotlin {
    jvmToolchain 17
    compilerOptions {
        optIn.add("kotlinx.coroutines.ExperimentalCoroutinesApi")
    }
}

android {
    namespace = "com.maltaisn.notes"

    defaultConfig {
        applicationId "com.maltaisn.notes"
        minSdk = 21
        compileSdk = 36
        buildToolsVersion = "35.0.0"
        targetSdk = 36
        versionCode 10505
        versionName "1.5.5"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                // See https://developer.android.com/training/data-storage/room/migrating-db-versions
                compilerArgumentProviders(new RoomSchemaArgProvider(new File(projectDir, "schemas")))
            }
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    testFixtures {
        enable = true
    }

    sourceSets {
        // This just add "kotlin" folder to source sets since the default is "java".
        main {
            java.srcDirs += "src/main/kotlin"
        }
        debug {
            java.srcDirs += "src/debug/kotlin"
        }
        release {
            java.srcDirs += "src/release/kotlin"
        }
        testFixtures {
            java.srcDirs += "src/testFixtures/kotlin"
        }

        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    signingConfigs {
        release {
            if (project.hasProperty("releaseKeyStoreFile")) {
                storeFile file(releaseKeyStoreFile)
                storePassword releaseKeyStorePassword
                keyAlias releaseKeyStoreKey
                keyPassword releaseKeyStoreKeyPassword
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            // enable debug features only if not taking screenshots
            // androidTest can seemingly only be run in debug mode, hence why it's needed.
            def takingScreenshots = System.getenv("taking_screenshots")
            buildConfigField "boolean", "ENABLE_DEBUG_FEATURES",
                    takingScreenshots == null ? "true" : (!takingScreenshots.toBoolean()).toString()
        }
        release {
            // Using legacy package name 'com.maltaisn.notes.sync' which was used at the time where
            // there was a sync flavor. Package can't be changed on Play Store so it was kept.
            applicationIdSuffix ".sync"

            minifyEnabled true
            shrinkResources = true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            signingConfig = signingConfigs.release
            buildConfigField "boolean", "ENABLE_DEBUG_FEATURES", "false"
        }
    }

    packagingOptions {
        // see https://stackoverflow.com/questions/44342455
        resources.excludes.add("META-INF/*")
    }
}

dependencies {
    // App dependencies
    implementation(libs.androidx.coreKtx)
    implementation(libs.androidx.fragmentKtx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.recyclerview)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.preferenceKtx)
    implementation(libs.material)
    implementation(libs.recurpicker)

    // Kotlin
    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlin.coroutinesCore)
    implementation(libs.kotlin.coroutinesAndroid)
    implementation(libs.kotlin.serializationJson)

    // Dagger
    implementation(libs.dagger)
    kapt(libs.dagger.compiler)

    // Architecture components
    ksp(libs.room.compiler)
    implementation(libs.room.runtime)
    implementation(libs.room.ktx)
    implementation(libs.lifecycle.common)
    implementation(libs.lifecycle.livedataKtx)
    implementation(libs.lifecycle.viewmodelKtx)
    implementation(libs.lifecycle.viewmodelSavedstate)

    // Navigation component
    implementation(libs.navigation.uiKtx)
    implementation(libs.navigation.fragmentKtx)

    // Debug
    debugImplementation(libs.leakcanary.android)
    debugImplementation(libs.venom)
    releaseImplementation(libs.venom.noop)

    // Dependencies for shared test code
    testFixturesApi(libs.junit)
    testFixturesApi(libs.kotlin.test)
    testFixturesApi(libs.kotlin.coroutinesTest)
    testFixturesApi(libs.mockito.kotlin)
    testFixturesApi(libs.androidx.arch.coreTesting)
    testFixturesApi(libs.androidx.test.core)
    testFixturesApi(libs.androidx.test.coreKtx)
    testFixturesApi(libs.androidx.test.junit)
    testFixturesApi(libs.androidx.test.junitKtx)
    testFixturesApi(libs.androidx.test.rules)

    // Dependencies for unit tests
    testImplementation testFixtures(project(":app"))

    // Dependencies for android tests
    androidTestImplementation testFixtures(project(":app"))
    androidTestImplementation(libs.androidx.test.runner)
    androidTestImplementation(libs.mockito.android)
    androidTestImplementation(libs.room.testing)
    // For screenshots
    androidTestImplementation(libs.espresso)
    androidTestImplementation(libs.espresso.contrib)
}

tasks.named("build") {
    // don't test, don't lint, don't run detekt for build task.
    setDependsOn(getDependsOn().findAll { it != "check" })
}

play {
    serviceAccountCredentials = file("fake-key.json")
}
if (file("publishing.gradle").exists()) {
    apply from: "publishing.gradle"
}

tasks.register("takeScreenshots", Exec) {
    commandLine "./screenshots.sh"
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
    }

    @Override
    Iterable<String> asArguments() {
        return ["room.schemaLocation=${schemaDir.path}".toString()]
    }
}

ksp {
    arg(new RoomSchemaArgProvider(new File(projectDir, "schemas")))
}